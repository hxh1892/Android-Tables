package com.hxh.table;

import android.content.Context;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.listener.PieChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PieChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.SliceValue;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.ColumnChartView;
import lecho.lib.hellocharts.view.LineChartView;
import lecho.lib.hellocharts.view.PieChartView;

public class HelloChart_Activity extends AppCompatActivity
{
    private Context mContext = this;

    private LineChartView lcv;
    private ColumnChartView ccv;
    private PieChartView pcv;

    //图表数据点
    private int[] data = {50, 42, 85, 42, 80, 74, 60, 55, 79, 45};
    private String[] labelData = {"50%", "42%", "85%", "42%", "80%", "74%", "60%", "55%", "79%", "45%"};
    private String[] axis_x = {"01-08", "02-23", "03-30", "04-22", "05-05", "06-08", "07-20", "08-01", "09-10", "10-03"};
    private String[] axis_y = {"0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110"};

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.act_hellochart);

        lcv = findViewById(R.id.lcv);
        ccv = findViewById(R.id.ccv);
        pcv = findViewById(R.id.pcv);

        initLineChart();
        initColumnChart();
        initPieChart();
    }

    private List<AxisValue> getXValues()
    {
        List<AxisValue> list_AxisXValues = new ArrayList<>();

        //设置X轴显示
        for (int i = 0; i < axis_x.length; i++)
        {
            list_AxisXValues.add(new AxisValue(i).setLabel(axis_x[i]));
        }

        return list_AxisXValues;
    }

    private List<AxisValue> getYValues()
    {
        List<AxisValue> list_AxisYValues = new ArrayList<>();

        //设置Y轴显示
        for (int i = 0; i <= 100; i += 10)
        {
            list_AxisYValues.add(new AxisValue(i).setLabel(axis_y[i / 10]));
        }

        return list_AxisYValues;
    }

    private Axis getXAxis()
    {
        //X轴
        Axis axisX = new Axis();
        //X轴标注
//        axisX.setName("X轴");
        //设置字体颜色
        axisX.setTextColor(Color.parseColor("#999999"));
        //设置字体大小
        axisX.setTextSize(10);
        //是否有分割线
        axisX.setHasLines(false);
        //X坐标轴字体是否斜体
        axisX.setHasTiltedLabels(false);
        //填充X轴的坐标名称
        axisX.setValues(getXValues());
        //设置轴标签和名字的字体
//        axisX.setTypeface(Typeface typeface);
        //设置轴标签可显示的最大字符个数，范围在0-32之间
//        axisX.setMaxLabelChars(5);
        //设置是否自动生成轴对象，自动适应表格的范围
        axisX.setAutoGenerated(false);
        //设置是否将轴坐标的值显示在图表内侧
        axisX.setInside(false);

        return axisX;
    }

    private Axis getYAxis()
    {
        //Y轴(不设置setValues会根据数据的大小自动设置Y轴上限)
        Axis axisY = new Axis();
        //Y轴标注
//        axisY.setName("Y轴");
        //设置字体颜色
        axisY.setTextColor(Color.parseColor("#999999"));
        //设置字体大小
        axisY.setTextSize(10);
        //是否有分割线
        axisY.setHasLines(false);
        //Y坐标轴字体是否斜体
        axisY.setHasTiltedLabels(false);
        //填充Y轴的坐标名称
        axisY.setValues(getYValues());
        //设置轴标签和名字的字体
//        axisY.setTypeface(Typeface typeface);
        //设置轴标签可显示的最大字符个数，范围在0-32之间
        axisY.setMaxLabelChars(4);
        //设置是否自动生成轴对象，自动适应表格的范围
        axisY.setAutoGenerated(false);
        //设置是否将轴坐标的值显示在图表内侧
        axisY.setInside(false);

        return axisY;
    }

    private void initLineChart()
    {
        List<PointValue> list_PointValue = new ArrayList<>();

        //设置图表数据点显示
        for (int i = 0; i < data.length; i++)
        {
            list_PointValue.add(new PointValue(i, data[i]));
        }

        //折线
        Line line = new Line(list_PointValue);
        //是否用线显示 如果为false 则没有曲线只有点显示
        line.setHasLines(true);
        //折线颜色
        line.setColor(Color.parseColor("#1663be"));
        //折线粗细
        line.setStrokeWidth(1);
        //是否有数据点
        line.setHasPoints(true);
        //数据点大小
        line.setPointRadius(2);
        //数据点颜色
        line.setPointColor(Color.parseColor("#1663be"));
        //折线上每个数据点形状(CIRCLE SQUARE DIAMOND)
        line.setShape(ValueShape.CIRCLE);
        //是否平滑
        line.setCubic(false);
        //是否填充曲线的面积
        line.setFilled(false);
        //曲线的数据坐标是否加上备注
        line.setHasLabels(true);
        //点击数据坐标提示数据（设置line.setHasLabels(true);就无效）
//      line.setHasLabelsOnlyForSelected(true);

        List<Line> list_line = new ArrayList<>();
        list_line.add(line);

        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(list_line);

        //设置标签背景颜色
        lineChartData.setValueLabelBackgroundColor(Color.parseColor("#00ffffff"));
        //设置是否自动绘制标签背景
        lineChartData.setValueLabelBackgroundAuto(false);
        //设置标签文字颜色，默认为白色
        lineChartData.setValueLabelsTextColor(Color.parseColor("#1663be"));
        //设置标签文字字号，默认为12sp
        lineChartData.setValueLabelTextSize(10);
        //设置标签文字字体
//        lineChartData.setValueLabelTypeface(Typeface typeface);

        //X轴在底部
        lineChartData.setAxisXBottom(getXAxis());
        //X轴在顶部
        //lineChartData.setAxisXTop(getXAxis());

        //Y轴设置在左边
        lineChartData.setAxisYLeft(getYAxis());
        //Y轴设置在右边
        //lineChartData.setAxisYRight(getYAxis());

        //设置图表是可以交互的（拖拽，缩放等效果的前提）
        lcv.setInteractive(false);
        //设置缩放方向
//        lcv.setZoomType(ZoomType.HORIZONTAL);
        //最大方法比例
//        lcv.setMaxZoom((float) 2);
//        lcv.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);

        //给图表设置数据
        lcv.setLineChartData(lineChartData);

        //设置坐标轴的范围(left-1,right+1可以使X轴坐标前后有空间)
        Viewport viewport = new Viewport(-1, 100, getXValues().size(), 0);

        //使viewport发生偏移，dx为正数表示向右，dy为正数表示向下
//        viewport.offset(2, 0);

        lcv.setMaximumViewport(viewport);
        lcv.setCurrentViewport(viewport);
    }

    private void initColumnChart()
    {
        List<Column> list_Column = new ArrayList<>();

        //设置图表数据点显示
        for (int i = 0; i < data.length; i++)
        {
            List<SubcolumnValue> list_SubcolumnValue = new ArrayList<>();
            list_SubcolumnValue.add(new SubcolumnValue(data[i], Color.parseColor("#" + i + i + "88" + i + i)));
            list_SubcolumnValue.add(new SubcolumnValue(34, Color.parseColor("#00ff" + i + i)));

            //柱
            Column column = new Column(list_SubcolumnValue);
            //柱的数据坐标是否加上备注
            column.setHasLabels(true);
            //点击数据坐标提示数据（设置column.setHasLabels(true);就无效）
//      column.setHasLabelsOnlyForSelected(true);

            list_Column.add(column);
        }

        ColumnChartData columnChartData = new ColumnChartData();
        columnChartData.setColumns(list_Column);

        //设置标签背景颜色
        columnChartData.setValueLabelBackgroundColor(Color.parseColor("#00ffffff"));
        //设置是否自动绘制标签背景
        columnChartData.setValueLabelBackgroundAuto(false);
        //设置标签文字颜色，默认为白色
        columnChartData.setValueLabelsTextColor(Color.parseColor("#00ff00"));
        //设置标签文字字号，默认为12sp
        columnChartData.setValueLabelTextSize(10);
        //设置标签文字字体
//        columnChartData.setValueLabelTypeface(Typeface typeface);
        //设置柱底部距离
//        columnChartData.setBaseValue(5);
        //设置间距
//        columnChartData.setFillRatio(-5);

        //X轴在底部
        columnChartData.setAxisXBottom(getXAxis());
        //X轴在顶部
        //columnChartData.setAxisXTop(getXAxis());

        //Y轴设置在左边
        columnChartData.setAxisYLeft(getYAxis());
        //Y轴设置在右边
        //columnChartData.setAxisYRight(getYAxis());

        //设置图表是可以交互的（拖拽，缩放等效果的前提）
        ccv.setInteractive(false);
        //设置缩放方向
//        ccv.setZoomType(ZoomType.HORIZONTAL);
        //最大方法比例
//        ccv.setMaxZoom((float) 2);
//        ccv.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);

        //给图表设置数据
        ccv.setColumnChartData(columnChartData);

        //自定义坐标轴的范围(left-1,right+1可以使数据前后产生一定空档)
        Viewport viewport = new Viewport(-1, 110, getXValues().size(), 0);

        //使viewport发生偏移，dx为正数表示向右，dy为正数表示向下
//        viewport.offset(2, 0);

        ccv.setMaximumViewport(viewport);
        ccv.setCurrentViewport(viewport);
    }

    private void initPieChart()
    {
        List<SliceValue> list_SliceValue = new ArrayList<>();

        for (int i = 0; i < data.length; ++i)
        {
            SliceValue sliceValue = new SliceValue(data[i], Color.parseColor("#" + i + i + "ff" + i + i));
            //显示在饼图标签上展示的文字
            sliceValue.setLabel(labelData[i]);
            list_SliceValue.add(sliceValue);
        }

        PieChartData pieChartData = new PieChartData();

        //是否显示标签
        pieChartData.setHasLabels(true);
        //标签是否显示在饼图外面
        pieChartData.setHasLabelsOutside(false);
        //不用点击显示占的百分比
        pieChartData.setHasLabelsOnlyForSelected(false);

        //填充数据
        pieChartData.setValues(list_SliceValue);

        //设置标签背景颜色
        pieChartData.setValueLabelBackgroundColor(Color.parseColor("#00000000"));
        //设置文本背景颜色时,必须设置自动背景为false
        pieChartData.setValueLabelBackgroundAuto(false);
        //设置标签文字颜色，默认为白色
        pieChartData.setValueLabelsTextColor(Color.parseColor("#1663be"));
        //设置标签文字字号，默认为12sp
        pieChartData.setValueLabelTextSize(10);
        //设置标签文字字体
//        pieChartData.setValueLabelTypeface(Typeface typeface);

        //设置分离间距
        pieChartData.setSlicesSpacing(1);

        //是否有中心环
        pieChartData.setHasCenterCircle(true);
        //设置环形中间的颜色
        pieChartData.setCenterCircleColor(Color.YELLOW);
        //设置环形的大小级别(直径与饼图直径之比)
        pieChartData.setCenterCircleScale(0.3f);
        //环形中间的文字1
        pieChartData.setCenterText1("饼图测试1");
        //文字1颜色
        pieChartData.setCenterText1Color(Color.BLUE);
        //文字1大小
        pieChartData.setCenterText1FontSize(10);
        //环形中间的文字2
        pieChartData.setCenterText2("饼图测试2");
        //文字2颜色
        pieChartData.setCenterText2Color(Color.GREEN);
        //文字2大小
        pieChartData.setCenterText2FontSize(15);
        //设置字体
//      Typeface tf = Typeface.createFromAsset(this.getAssets(), "Roboto-Italic.ttf");
//      pieChartData.setCenterText1Typeface(tf);

        pcv.setPieChartData(pieChartData);

        //设置透明度
        pcv.setAlpha(0.9f);
        //设置饼状图占整个view的比例
        pcv.setCircleFillRatio(0.8f);

        //设置动画
        pcv.startDataAnimation();
        //选择饼图某一块变大
        pcv.setValueSelectionEnabled(true);
        //设置饼图自动适应大小
        pcv.setViewportCalculationEnabled(true);
        //设置饼图是否可以手动旋转
        pcv.setChartRotationEnabled(true);

        pcv.setOnValueTouchListener(new PieChartOnValueSelectListener()
        {
            @Override
            public void onValueDeselected()
            {
                Toast.makeText(mContext, "当前块取消选中", Toast.LENGTH_LONG).show();
            }

            @Override
            public void onValueSelected(int i, SliceValue sliceValue)
            {
                Toast.makeText(mContext, "当前选中块值为: " + sliceValue.getValue(), Toast.LENGTH_SHORT).show();
            }
        });
    }
}